syntax = "proto3";
package tuxtape.common.v1;

import "tuxtape/common/v1/kernel.proto";

// A particular Vulnerability. Almost always describes a Cve.
message Vulnerability {
  // Instances of this Vulnerability across different MainlineKernelVersions.
  // Will be empty if no instances exist in the managed fleet.
  repeated VulnerabilityInstance instances = 1;

  // The CVE that this Vulnerability describes.
  // A Vulnerability will always describe a Cve unless a CVE has not yet been
  // published for this Vulnerability.
  optional Cve cve = 2;
}

// An instance of a Vulnerability.
//
// "Instance" in this context refers to the fact that a Vulnerability may
// persist across multiple kernel trains. If a `Vulnerability` exists across
// multiple kernel trains, there will be a unique `VulnerabilityInstance` for
// each of those.
// e.g. The `Vulnerability` describing CVE-2024-47685 exists in both the 6.6
// train and the 6.11 train, so there will be a unique `VulnerabilityInstance`
// for both kernel trains.
message VulnerabilityInstance {
  // The `MainlineKernelVersion` in which the Vulnerability was introduced.
  tuxtape.common.v1.MainlineKernelVersion introduced = 1;
  // The `MainlineKernelVersion` that patched the `Vulnerability`.
  // Will be null if the `Vulnerability` was not patched in a later
  // `MainlineKernelVersion`.
  optional tuxtape.common.v1.MainlineKernelVersion fixed = 2;
  // The prefix of the commit hash (first 12 characters) that
  // patched the `Vulnerability` in the fixed `MainlineKernelVersion`.
  // Will be null if the `Vulnerability` was not patched in a later
  // `MainlineKernelVersion`.
  optional string fixed_commit_prefix = 3;
  // All files affected in this instance of the `Vulnerability`.
  // Will be empty if the `Vulnerability` was not patched in a later
  // `MainlineKernelVersion`.
  repeated string affected_files = 4;
  // Metadata on all kernels affected by this `Vulnerability`.
  // Will be empty if the `Vulnerability` was not patched in a later
  // `MainlineKernelVersion` or if no kernel build on the fleet is affected by
  // this `Vulnerability`.
  repeated tuxtape.common.v1.KernelSource affected_kernels = 5;
  // The raw git diff of the commit that patched the `Vulnerability` in the
  // fixed `MainlineKernelVersion`.
  // Will be null if the `Vulnerability` was not patched in a later
  // `MainlineKernelVersion`.
  optional string raw_patch = 6;
  // A URL into the archive where a kpatch-compatible patch approved for
  // deployment is stored.
  // Will be null if no deployable patch has been approved.
  optional string deployable_patch_url = 7;
}

// A CVE described by a particular `Vulnerability.`
message Cve {
  // The ID of the CVE.
  string id = 1;
  // Will be null if the CVE has not yet been evaluated by NIST.
  optional float severity = 2;
  // Will be null if the CVE has not yet been evaluated by NIST.
  optional string attack_vector = 3;
  // Will be null if the CVE has not yet been evaluated by NIST.
  optional string attack_complexity = 4;
  // Will be null if the CVE has not yet been evaluated by NIST.
  optional string privileges_required = 5;
  // Will be null if the CVE has not yet been evaluated by NIST.
  optional string user_interaction = 6;
  // Will be null if the CVE has not yet been evaluated by NIST.
  optional string scope = 7;
  // Will be null if the CVE has not yet been evaluated by NIST.
  optional string confidentiality_impact = 8;
  // Will be null if the CVE has not yet been evaluated by NIST.
  optional string integrity_impact = 9;
  // Will be null if the CVE has not yet been evaluated by NIST.
  optional string availability_impact = 10;
  // Will be null if the CVE has not yet been evaluated by NIST.
  optional string description = 11;
}
