syntax = "proto3";
package tuxtape.server.fleet_client.v1;

import "tuxtape/common/v1/kernel.proto";

// The service to handle requests from tuxtape-fleet-client.
service FleetClientService {
  // A heartbeat to be sent regularly to communicate the status of the
  // tuxtape-fleet-client and request any newly required patches.
  // Should be sent regularly by tuxtape-fleet-client.
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  // Should be called by tuxtape-fleet-client at the different stages of
  // patches.
  rpc ReportLivepatchStatus(ReportLivepatchStatusRequest) returns (ReportLivepatchStatusResponse);
  // Should be sent by the tuxtape-fleet-client upon discovering an error from a
  // livepatch as soon as possible. If the patched fleet client crashes, it
  // should report this error immediately after its initial `Heartbeat` on
  // reboot.
  rpc ReportLivepatchError(ReportLivepatchErrorRequest) returns (ReportLivepatchErrorResponse);
}

// A heartbeat to be sent regularly to communicate the status of the
// tuxtape-fleet-client and request any newly required patches.
message HeartbeatRequest {
  // The `KernelRelease` running on this fleet client.
  tuxtape.common.v1.KernelRelease kernel_release = 1;
  // The unique machine ID generated by `dbus-uuidgen`.
  // To extract this value, run: `cat /etc/machine-id`
  // (or get an equivalent unique ID provided by your distro).
  string machine_id = 2;
  // The version of tuxtape-fleet-client.
  Version fleet_client_version = 3;
  // The uptime in seconds as determined by `/proc/uptime`.
  // To extract this value, run: `awk '{print $1}' /proc/uptime`
  float uptime_seconds = 4;
  // The timestamp of the last heartbeat.
  // Should be null if this is the first heartbeat since boot.
  optional float last_heartbeat_timestamp_seconds = 5;
  // A list of the unique names of already-applied patches.
  // Should be empty if no livepatches are currently running on the fleet
  // client.
  repeated string applied_patch_names = 6;
}

// The response to a FleetClientHeartbeatRequest.
message HeartbeatResponse {
  // A list of unique livepatch names that tuxtape-fleet-client should unload
  // before installing newly-needed patches.
  // Will be empty if no patches are to be unloaded.
  repeated string unload_patch_names = 1;
  // A list of URLs to download the required patches.
  // Will be empty if no patches are required.
  repeated string deployable_patch_urls = 2;
}

// Should be called by tuxtape-fleet-client at the different stages of
// patches.
message ReportLivepatchStatusRequest {
  // The statuses of all  and loaded livepatches.
  repeated LivepatchStatus statuses = 1;
}

// The response to a ReportLivepatchStatusRequest.
message ReportLivepatchStatusResponse {}

// Describes the status of a livepatch module.
message LivepatchStatus {
  // The unique name of the livepatch.
  string patch_name = 1;
  // The status of the livepatch.
  oneof status {
    // A non-error status.
    LoadingStatus loading_status = 2;
    // An error status.
    LivepatchError error_status = 3;
  }

  // Describes the loading status of a livepatch module.
  enum LoadingStatus {
    // Conventional default for enums. Do not use this.
    LOADING_STATUS_UNSPECIFIED = 0;
    // The livepatch is currently loading.
    LOADING_STATUS_LOADING = 1;
    // The livepatch has successfully loaded.
    LOADING_STATUS_LOADED = 2;
  }
}

// Should be sent by the tuxtape-fleet-client upon discovering an error from a
// livepatch as soon as possible.
message ReportLivepatchErrorRequest {
  LivepatchError error = 1;
}

// Describes an error with a livepatch module, either while loading or at
// runtime.
message LivepatchError {
  // The unique name of the erroring livepatch.
  string errored_patch_name = 1;
  // The relevant lines of the kernel log describing the error.
  // Will be null if no log was able to be found.
  optional string log = 2;
  // Describes what type of error occurred.
  ErrorType error_type = 3;

  // Describes types/severity of errors.
  enum ErrorType {
    // Conventional default for enums. Do not use this.
    ERROR_TYPE_UNSPECIFIED = 0;
    // An error which occurred at load time for the livepatch.
    ERROR_TYPE_LOAD = 1;
    // An error which occurred during livepatch runtime, but did not trigger a
    // reboot.
    ERROR_TYPE_RUNTIME = 2;
    // An error which occurred during livepatch runtime and was able to place
    // logs in pstore.
    ERROR_TYPE_SOFT_REBOOT = 3;
    // An error which occurred during livepatch runtime and was not able to
    // place logs in pstore.
    ERROR_TYPE_HARD_REBOOT = 4;
  }
}

// The response to a ReportLivepatchErrorResponse.
message ReportLivepatchErrorResponse {}

// The version of tuxtape-fleet-client.
message Version {
  // The major version of the fleet client.
  uint32 major = 1;
  // The minor version of the fleet client.
  uint32 minor = 2;
  // The patch version of the fleet client.
  uint32 patch = 3;
}
